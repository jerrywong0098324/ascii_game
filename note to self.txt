******************************************************************************
PREVENTING MEMORY LEAKS

1) When c++ program ends, any object initiated in another object will not have
their deconstructor called.
-> Example: Application object created in main.cpp, Game object created within 
Application object. Unable to delete any pointer just simply by putting them 
inside Game object's deconstructor. Have to create another funtion just to 
deallocate memory from the heap and calling that function at the Exit function
inside Application object.
******************************************************************************
AVOIDING LINKER ISSUE WHEN CREATING ABSTRACT CLASSES

1) Example: When creating pure virtual destructor, do something like this
-> virtual ~ISingleton() = 0 {};

Important thing to note is to add {} at the end;
******************************************************************************
Audio is designed in a way that it must be created using a pointer.
Bad design but I guess it's the best one I have as of 11/6/2020 LOL

Program will crash when one of the audio files cannot be open properly
Facing issue with opening *.mp3 files. Though I only try with one. Just 
becareful next time! :D
******************************************************************************